import hashlib
import json
from collections import OrderedDict
import binascii
from ecdsa import SigningKey, VerifyingKey, SECP256k1

class Wallet:
    def __init__(self):
        self.private_key = None
        self.public_key = None

    def generate_keys(self):
        # Generate a new private key
        self.private_key = SigningKey.generate(curve=SECP256k1)
        # Derive the public key from the private key
        self.public_key = self.private_key.get_verifying_key()

    def sign(self, message):
        # Sign a message with the private key
        signature = self.private_key.sign(message.encode())
        return binascii.hexlify(signature).decode()

    def verify_signature(self, message, signature, public_key):
        # Verify a signature against a message and public key
        try:
            verifying_key = VerifyingKey.from_string(binascii.unhexlify(public_key), curve=SECP256k1)
            return verifying_key.verify(binascii.unhexlify(signature), message.encode())
        except:
            return False

# Example usage
if __name__ == "__main__":
    # Create a new wallet
    my_wallet = Wallet()
    my_wallet.generate_keys()

    # Generate a message to sign
    message = "Hello, world!"

    # Sign the message
    signature = my_wallet.sign(message)
    print("Signature:", signature)

    # Verify the signature
    is_valid = my_wallet.verify_signature(message, signature, my_wallet.public_key.to_string().hex())
    print("Signature is valid:", is_valid)
